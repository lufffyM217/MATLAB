clear;
close all;
clc
%add pre MatConvNet setup
vl_setupnn;
%% Set some network parameters
opts.train.batchSize = 20;
opts.numSubBatches = 10 ;
opts.train.numEpochs = 20 ;
opts.train.learningRate = 0.001 ;

opts.backPropDepth = +inf ;
% opts.cudnn = true ;
opts.weightDecay = 0.0009 ;
opts.momentum = 0.9 ;
opts.errorFunction = 'multiclass' ;

%% Loda Data and normalization
imdb = getJaffeImdb('F:\Documents\MATLAB\Data\Jaffe\jaffe train',...
    'F:\Documents\MATLAB\Data\Jaffe\jaffe test',[256 256 1]);
% Image normalization
imageMean = mean(imdb.images.data(:)) ;
imdb.images.data = imdb.images.data - imageMean ;
Factor=0.01 ;
%% Network architecture
net.layers = {} ;
%                   Receptive Field(9*9)-7 Filter
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{Factor*randn(9,9,1,7, 'single'),...
    zeros(1, 7, 'single')}}, ...
    'stride', 1, ...
    'pad', 0) ;
%net.layers{end+1} = struct('type', 'dropout', 'name',...
%                            'dropout2', 'rate', 0.3);
% Max Pool(size=4*4)
net.layers{end+1} = struct('type', 'pool', ...
    'method', 'max', ...
    'pool', [4 4], ...
    'stride', 4, ...
    'pad', 0) ;
% Receptive Field(7*7)-7 Filter
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{Factor*randn(7,7,7,7, 'single'),...
    zeros(1, 7, 'single')}}, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'dropout', 'name',...
    'dropout2', 'rate', 0.3);

% Max Pool(size=4*4)
net.layers{end+1} = struct('type', 'pool', ...
    'method', 'max', ...
    'pool', [4 4], ...
    'stride', 4, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'dropout', 'name',...
    'dropout2', 'rate', 0.5);
% Receptive Field(5*5)-7 Filter
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{Factor*randn(5,5,7,7, 'single'),...
    zeros(1, 7, 'single')}}, ...
    'stride', 1, ...
    'pad', 0) ;
net.layers{end+1} = struct('type', 'dropout', 'name',...
    'dropout2', 'rate', 0.5) ;
% Max Pool(size=2*2)
net.layers{end+1} = struct('type', 'pool', ...
    'method', 'max', ...
    'pool', [2 2], ...
    'stride', 2, ...
    'pad', 0) ;
% Receptive Field(5*5)-7 Filter as Fully connected layer
net.layers{end+1} = struct('type', 'conv', ...
    'weights', {{Factor*randn(5,5,7,7, 'single'),...
    zeros(1, 7, 'single')}}, ...
    'stride', 1, ...
    'pad', 0) ;
% activation function
net.layers{end+1} = struct('type', 'softmaxloss') ;

%% Train yhe network
[net, info] = cnn_train(net, imdb, @getBatch,opts.train,'val', find(imdb.images.set == 3)) ;
%%
vl_simplenn_display(net) ;