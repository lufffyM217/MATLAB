clear;
close all;
clc
%add pre MatConvNet setup
vl_setupnn;
% --------------------------------------------------------------------
%                                                         options
% --------------------------------------------------------------------
% opts.dataDir = fullfile('data','mnist') ;
opts.train.batchSize = 10;
opts.train.numEpochs = 100 ;
opts.train.learningRate = 0.001 ;
% --------------------------------------------------------------------
%                                                         Prepare data
% --------------------------------------------------------------------
imdb = getJaffeImdb('F:\Documents\MATLAB\Neural Network\NN - HW3\jaffe\data\jaffeTrain','F:\Documents\MATLAB\Neural Network\NN - HW3\jaffe\data\jaffeTest',[28 28 1]);


f=1/100 ;
net.layers = {} ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(5,5,1,20, 'single'), zeros(1, 20, 'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(5,5,20,50, 'single'),zeros(1,50,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(4,4,50,500, 'single'),  zeros(1,500,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
% net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(1,1,500,5, 'single'), zeros(1,5,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'softmaxloss') ;


% --------------------------------------------------------------------
%                                                                Train
% --------------------------------------------------------------------

 [net, info] = cnn_train(net, imdb, @getBatch, ...
     opts.train, ...
     'val', find(imdb.images.set == 3)) ;
