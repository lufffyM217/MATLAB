clc
clear
close all;

% % add MatConvNet  installed directory
% cd ..\matconvnet-1.0-beta16\matlab;
% addpath matlab;
% cd ..;
% %add pre MatConvNet setup
% vl_setupnn;

% —------------------------------------------------------------------
%                                                         options
% —------------------------------------------------------------------
opts.dataDir = fullfile('F:\Documents\MATLAB\Neural Network\NN - HW3\jaffe\data','mnist') ;
opts.train.batchSize = 100;
opts.train.numEpochs = 3 ;
opts.train.learningRate = 0.001 ;
% —------------------------------------------------------------------
%                                                         Prepare data
% —------------------------------------------------------------------
imdb = getMnistImdb(opts);


f=1/100 ;
net.layers = {} ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(5,5,1,20, 'single'), zeros(1, 20, 'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(5,5,20,50, 'single'),zeros(1,50,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'pool', ...
                           'method', 'max', ...
                           'pool', [2 2], ...
                           'stride', 2, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(4,4,50,500, 'single'),  zeros(1,500,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'relu') ;
net.layers{end+1} = struct('type', 'conv', ...
                           'weights', {{f*randn(1,1,500,10, 'single'), zeros(1,10,'single')}}, ...
                           'stride', 1, ...
                           'pad', 0) ;
net.layers{end+1} = struct('type', 'softmaxloss') ;


% —------------------------------------------------------------------
%                                                                Train
% —------------------------------------------------------------------

 [net, info] = cnn_train(net, imdb, @getBatch, ...
     opts.train, ...
     'val', find(imdb.images.set == 3)) ;